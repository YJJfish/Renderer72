#version 450

layout (local_size_x = 32, local_size_y = 32) in;
layout (set = 0, binding = 0, rg32f) uniform image2D sumLight;
layout (set = 0, binding = 1, rg32f) uniform image2D outputImage;
layout(push_constant) uniform SampleRange {
	ivec2 range; // Should be 0~numSamples. When range[0]=numSamples+1, pack sumLight into outputImage.
	int numSamples;
} sampleRange;

#define PI 3.1415926535897932384626433832795

vec2 hammersley(int i, int n, int base) {
	vec2 ret;
	ret.x = float(i) / float(n);
	ret.y = 0.0;
	int num = i;
	float frac = 1.0;
	while (num > 0) {
		frac /= float(base);
		ret.y += float(num % base) * frac;
		num /= base;
	}
	return ret;
}

vec3 importanceSampleGGX(vec2 Xi, float roughness, vec3 N) {
	float a = roughness * roughness;
	float phi = 2.0 * PI * Xi.x;
	float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a * a - 1.0) * Xi.y));
	float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
	vec3 H;
	H.x = sinTheta * cos(phi);
	H.y = sinTheta * sin(phi);
	H.z = cosTheta;
	vec3 upVector = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
	vec3 tangentX = normalize(cross(upVector, N));
	vec3 tangentY = normalize(cross(N, tangentX));
	return normalize(tangentX * H.x + tangentY * H.y + N * H.z);
}

float GeometrySchlickGGX(float NoX, float roughness) {
    // note that we use a different k for IBL
    float a = roughness * roughness;
    float k = a / 2.0;
    return NoX / (NoX * (1.0 - k) + k);
}

float GeometrySmith(float NoV, float NoL, float roughness) {
    float ggx2 = GeometrySchlickGGX(NoV, roughness);
    float ggx1 = GeometrySchlickGGX(NoL, roughness);

    return ggx1 * ggx2;
}

// Compute shader main function
void main() {
	ivec2 outputImageSize = imageSize(outputImage);
	if (gl_GlobalInvocationID.x >= outputImageSize.x || gl_GlobalInvocationID.y >= outputImageSize.y)
		return;
	ivec2 outputPixel = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
	float NoV = float(outputPixel.x + 0.5) / outputImageSize.x;
	float roughness = float(outputPixel.y + 0.5) / outputImageSize.y;

	vec2 sumL = imageLoad(sumLight, outputPixel).xy;
	if (sampleRange.range[0] >= sampleRange.numSamples + 1) { // Special value for final pass
		imageStore(outputImage, outputPixel, vec4(sumL / sampleRange.numSamples, 0.0, 1.0));
		return;
	}

	vec3 V = vec3(sqrt(1.0 - NoV * NoV), 0.0, NoV);
    vec3 N = vec3(0.0, 0.0, 1.0);
	for(int i = sampleRange.range[0]; i < sampleRange.range[1]; ++i) {
		vec2 Xi = hammersley(i, sampleRange.numSamples, 2);
        vec3 H = importanceSampleGGX(Xi, roughness, N);
		vec3 L = normalize(2.0 * dot(V, H) * H - V);

        float NoL = clamp(dot(N, L), 0.0, 1.0);
        float NoH = clamp(dot(N, H), 0.0, 1.0);
        float VoH = clamp(dot(V, H), 0.0, 1.0);

        if(NoL > 0.0) {
            float G = GeometrySmith(NoV, NoL, roughness);
            float G_Vis = (G * VoH) / (NoH * NoV);
            float Fc = pow(1.0 - VoH, 5.0);

            sumL.x += (1.0 - Fc) * G_Vis;
            sumL.y += Fc * G_Vis;
        }
    }
	imageStore(sumLight, outputPixel, vec4(sumL, 0.0, 1.0));
}